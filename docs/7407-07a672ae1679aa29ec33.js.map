{"version":3,"file":"7407-07a672ae1679aa29ec33.js","mappings":"uIAAA,guF","sources":["webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesDist/Scale/EmblaCarousel.tsx"],"sourcesContent":["export default \"import React, { useCallback, useEffect, useState } from 'react'\\nimport { EmblaOptionsType } from 'embla-carousel'\\nimport useEmblaCarousel from 'embla-carousel-react'\\nimport { flushSync } from 'react-dom'\\nimport imageByIndex from '../imageByIndex'\\n\\nconst TWEEN_FACTOR = 3\\n\\nconst numberWithinRange = (number: number, min: number, max: number): number =>\\n  Math.min(Math.max(number, min), max)\\n\\ntype PropType = {\\n  slides: number[]\\n  options?: EmblaOptionsType\\n}\\n\\nconst EmblaCarousel: React.FC<PropType> = (props) => {\\n  const { slides, options } = props\\n  const [emblaRef, emblaApi] = useEmblaCarousel(options)\\n  const [tweenValues, setTweenValues] = useState<number[]>([])\\n\\n  const onScroll = useCallback(() => {\\n    if (!emblaApi) return\\n\\n    const engine = emblaApi.internalEngine()\\n    const scrollProgress = emblaApi.scrollProgress()\\n\\n    const styles = emblaApi.scrollSnapList().map((scrollSnap, index) => {\\n      let diffToTarget = scrollSnap - scrollProgress\\n\\n      if (engine.options.loop) {\\n        engine.slideLooper.loopPoints.forEach((loopItem) => {\\n          const target = loopItem.target()\\n          if (index === loopItem.index && target !== 0) {\\n            const sign = Math.sign(target)\\n            if (sign === -1) diffToTarget = scrollSnap - (1 + scrollProgress)\\n            if (sign === 1) diffToTarget = scrollSnap + (1 - scrollProgress)\\n          }\\n        })\\n      }\\n      const tweenValue = 1 - Math.abs(diffToTarget * TWEEN_FACTOR)\\n      return numberWithinRange(tweenValue, 0, 1)\\n    })\\n    setTweenValues(styles)\\n  }, [emblaApi, setTweenValues])\\n\\n  useEffect(() => {\\n    if (!emblaApi) return\\n\\n    onScroll()\\n    emblaApi.on('scroll', () => {\\n      flushSync(() => onScroll())\\n    })\\n    emblaApi.on('reInit', onScroll)\\n  }, [emblaApi, onScroll])\\n\\n  return (\\n    <div className=\\\"embla\\\">\\n      <div className=\\\"embla__viewport\\\" ref={emblaRef}>\\n        <div className=\\\"embla__container\\\">\\n          {slides.map((index) => (\\n            <div className=\\\"embla__slide\\\" key={index}>\\n              <div\\n                className=\\\"embla__scale\\\"\\n                style={{\\n                  ...(tweenValues.length && {\\n                    transform: `scale(${tweenValues[index]})`\\n                  })\\n                }}\\n              >\\n                <div className=\\\"embla__slide__number\\\">\\n                  <span>{index + 1}</span>\\n                </div>\\n                <img\\n                  className=\\\"embla__slide__img\\\"\\n                  src={imageByIndex(index)}\\n                  alt=\\\"A cool cat.\\\"\\n                />\\n              </div>\\n            </div>\\n          ))}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default EmblaCarousel\\n\";"],"names":[],"sourceRoot":""}