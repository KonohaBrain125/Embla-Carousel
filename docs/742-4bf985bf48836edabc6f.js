"use strict";(self.webpackChunkembla_carousel_docs=self.webpackChunkembla_carousel_docs||[]).push([[742],{742:function(n,e,s){s.r(e),e.default='import React, { useCallback, useEffect, useState } from \'react\';\nimport useEmblaCarousel from \'embla-carousel-react\';\nimport { flushSync } from \'react-dom\';\nimport imageByIndex from \'../imageByIndex\';\n\nconst TWEEN_FACTOR = 3;\n\nconst numberWithinRange = (number, min, max) => Math.min(Math.max(number, min), max);\n\nconst EmblaCarousel = (props) => {\n    const { slides, options } = props;\n    const [emblaRef, emblaApi] = useEmblaCarousel(options);\n    const [tweenValues, setTweenValues] = useState([]);\n    \n    const onScroll = useCallback(() => {\n        if (!emblaApi)\n            return;\n        \n        const engine = emblaApi.internalEngine();\n        const scrollProgress = emblaApi.scrollProgress();\n        \n        const styles = emblaApi.scrollSnapList().map((scrollSnap, index) => {\n            let diffToTarget = scrollSnap - scrollProgress;\n            \n            if (engine.options.loop) {\n                engine.slideLooper.loopPoints.forEach((loopItem) => {\n                    const target = loopItem.target();\n                    if (index === loopItem.index && target !== 0) {\n                        const sign = Math.sign(target);\n                        if (sign === -1)\n                            diffToTarget = scrollSnap - (1 + scrollProgress);\n                        if (sign === 1)\n                            diffToTarget = scrollSnap + (1 - scrollProgress);\n                    }\n                });\n            }\n            const tweenValue = 1 - Math.abs(diffToTarget * TWEEN_FACTOR);\n            return numberWithinRange(tweenValue, 0, 1);\n        });\n        setTweenValues(styles);\n    }, [emblaApi, setTweenValues]);\n    \n    useEffect(() => {\n        if (!emblaApi)\n            return;\n        \n        onScroll();\n        emblaApi.on(\'scroll\', () => {\n            flushSync(() => onScroll());\n        });\n        emblaApi.on(\'reInit\', onScroll);\n    }, [emblaApi, onScroll]);\n    \n    return (<div className="embla">\n      <div className="embla__viewport" ref={emblaRef}>\n        <div className="embla__container">\n          {slides.map((index) => (<div className="embla__slide" key={index}>\n              <div className="embla__scale" style={{\n                ...(tweenValues.length && {\n                    transform: `scale(${tweenValues[index]})`\n                })\n            }}>\n                <div className="embla__slide__number">\n                  <span>{index + 1}</span>\n                </div>\n                <img className="embla__slide__img" src={imageByIndex(index)} alt="A cool cat."/>\n              </div>\n            </div>))}\n        </div>\n      </div>\n    </div>);\n};\n\nexport default EmblaCarousel;\n'}}]);
//# sourceMappingURL=742-4bf985bf48836edabc6f.js.map