{"version":3,"sources":["webpack:///./src/components/Page/EditPage.tsx","webpack:///./src/components/Page/Pagination.tsx","webpack:///./src/components/Page/Breadcrumbs.tsx","webpack:///./src/templates/Page.tsx"],"names":["Wrapper","styled","PlainLink","PenSvg","PenIcon","createSquareSizeStyles","EditPage","props","pageUrl","url","URLS","GITHUB_DOCUMENTATION","to","aria-hidden","focusable","nav","Item","div","ItemLabel","ItemTitle","arrowSvgStyles","css","ArrowLeftSvg","ArrowLeftIcon","ArrowRightSvg","ArrowRightIcon","supportsStyles","gradientText","GradientText","span","gradientTextStyles","Pagination","next","previous","aria-label","slug","title","itemStyles","Link","ActiveTitle","ChevronSvg","ChevronRightIcon","Breadcrumbs","id","breadcrumbs","useRouteBreadcrumbs","length","map","index","key","role","Page","useSiteMetadata","siteUrl","author","data","pageContext","filePath","mdx","frontmatter","body","description","date","dateToISOString","useMemo","Date","toISOString","Seo","type","removeProtocol","maskable","SKIP_TO_CONTENT_ID","Mdx"],"mappings":"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","file":"component---src-templates-page-tsx-70756229183a67ecbb91.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { PlainLink } from 'components/Link'\nimport { PenIcon } from 'assets/icons'\nimport { createSquareSizeStyles } from 'utils'\nimport { URLS } from 'consts'\n\nconst Wrapper = styled(PlainLink)`\n  display: inline-flex;\n  align-items: center;\n  font-size: 1.4rem;\n  text-decoration: none;\n  padding-top: 0.6rem;\n  padding-bottom: 0.6rem;\n  margin-top: 4.8rem;\n  color: var(--text-low-contrast);\n`\n\nconst PenSvg = styled(PenIcon)`\n  margin-right: 0.6rem;\n  ${createSquareSizeStyles('1.5rem')};\n`\n\ntype PropType = { pageUrl: string }\n\nexport const EditPage = (props: PropType) => {\n  const { pageUrl } = props\n  const url = `${URLS.GITHUB_DOCUMENTATION}/${pageUrl}`\n\n  return (\n    <Wrapper to={url}>\n      <PenSvg aria-hidden=\"true\" focusable=\"false\" />\n      <span>Edit this page on GitHub</span>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { PropType as PageType } from 'templates/Page'\nimport { PlainLink } from 'components/Link'\nimport { ArrowLeftIcon, ArrowRightIcon } from 'assets/icons'\nimport { createSquareSizeStyles, gradientTextStyles } from 'utils'\nimport { supportsStyles } from 'consts'\n\nconst ITEM_SPACING = '2.4rem'\n\nconst Wrapper = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 4.8rem;\n  margin-left: -${ITEM_SPACING};\n`\n\nconst Item = styled.div`\n  padding-left: ${ITEM_SPACING};\n  &:nth-child(2) {\n    text-align: right;\n  }\n`\n\nconst ItemLabel = styled.div`\n  color: var(--text-low-contrast);\n  padding-bottom: 0.6rem;\n`\n\nconst ItemTitle = styled.div`\n  display: inline-flex;\n  align-items: center;\n  font-weight: 500;\n`\n\nconst arrowSvgStyles = css`\n  ${createSquareSizeStyles('1.8rem')}\n  color: var(--brand-primary);\n`\n\nconst ArrowLeftSvg = styled(ArrowLeftIcon)`\n  ${arrowSvgStyles};\n  margin-right: 0.6rem;\n`\n\nconst ArrowRightSvg = styled(ArrowRightIcon)`\n  ${arrowSvgStyles};\n  ${supportsStyles.gradientText} {\n    color: var(--brand-secondary);\n  }\n  margin-left: 0.6rem;\n`\n\nconst GradientText = styled.span`\n  ${gradientTextStyles};\n`\n\ntype PropType = {\n  next: PageType['pageContext']['next']\n  previous: PageType['pageContext']['previous']\n}\n\nexport const Pagination = (props: PropType) => {\n  const { next, previous } = props\n\n  return (\n    <Wrapper aria-label=\"Pagination Navigation\">\n      <Item>\n        {previous && (\n          <PlainLink to={previous.slug}>\n            <ItemLabel>Previous</ItemLabel>\n            <ItemTitle>\n              <ArrowLeftSvg aria-hidden=\"true\" focusable=\"false\" />\n              <GradientText>{previous.title}</GradientText>\n            </ItemTitle>\n          </PlainLink>\n        )}\n      </Item>\n      <Item>\n        {next && (\n          <PlainLink to={next.slug}>\n            <ItemLabel>Next</ItemLabel>\n            <ItemTitle>\n              <GradientText>{next.title}</GradientText>\n              <ArrowRightSvg aria-hidden=\"true\" focusable=\"false\" />\n            </ItemTitle>\n          </PlainLink>\n        )}\n      </Item>\n    </Wrapper>\n  )\n}\n","import React, { Fragment } from 'react'\nimport styled, { css } from 'styled-components'\nimport { PlainLink } from 'components/Link'\nimport { useRouteBreadcrumbs } from 'hooks'\nimport { ChevronRightIcon } from 'assets/icons'\nimport { createSquareSizeStyles } from 'utils'\n\nconst Wrapper = styled.nav`\n  display: flex;\n  align-items: center;\n  font-size: 1.4rem;\n  margin-bottom: 1.8rem;\n`\n\nconst itemStyles = css`\n  color: var(--text-low-contrast);\n  padding: 0.6rem 0;\n`\n\nconst Link = styled(PlainLink)`\n  ${itemStyles};\n`\n\nconst ActiveTitle = styled.span`\n  ${itemStyles};\n`\n\nconst ChevronSvg = styled(ChevronRightIcon)`\n  color: var(--text-low-contrast);\n  ${createSquareSizeStyles('0.6rem')};\n  margin: 0 0.6rem;\n`\n\ntype PropType = { id: string }\n\nexport const Breadcrumbs = (props: PropType) => {\n  const { id } = props\n  const breadcrumbs = useRouteBreadcrumbs(id)\n\n  if (breadcrumbs.length === 0) return null\n\n  return (\n    <Wrapper aria-label=\"Breadcrumb Navigation\">\n      {breadcrumbs.map(({ id, slug, title }, index) =>\n        index !== breadcrumbs.length - 1 ? (\n          <Fragment key={id}>\n            <Link to={slug}>{title}</Link>\n            <ChevronSvg role=\"presentation\" focusable=\"false\" />\n          </Fragment>\n        ) : (\n          <ActiveTitle key={id}>{title}</ActiveTitle>\n        ),\n      )}\n    </Wrapper>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport { Seo } from 'components/Seo'\nimport maskable from 'assets/images/maskable.png'\nimport { useSiteMetadata } from 'hooks'\nimport { EditPage, Pagination, Breadcrumbs } from 'components/Page'\nimport { SKIP_TO_CONTENT_ID } from 'components/TabAccess'\nimport { RouteType } from 'components/Routes'\nimport { removeProtocol } from 'utils'\nimport { Mdx } from 'components/Mdx'\n\nexport const query = graphql`\n  query PageQuery($id: String) {\n    mdx(id: { eq: $id }) {\n      body\n      frontmatter {\n        title\n        description\n        date(formatString: \"DD MMMM YYYY\")\n      }\n    }\n  }\n`\n\nexport type PropType = {\n  data: {\n    mdx: {\n      body: string\n      frontmatter: {\n        title: string\n        date: string\n        description: string\n      }\n    }\n  }\n  pageContext: {\n    id: string\n    filePath: string\n    next?: RouteType\n    previous?: RouteType\n    slug: string\n  }\n}\n\nconst Page = (props: PropType) => {\n  const { siteUrl, author } = useSiteMetadata()\n  const { data, pageContext } = props\n  const { next, previous, filePath, id } = pageContext\n  const { frontmatter, body } = data.mdx\n  const { title, description, date } = frontmatter\n  const dateToISOString = useMemo(\n    () => new Date(`${date} UTC`).toISOString(),\n    [date],\n  )\n\n  return (\n    <>\n      <Seo\n        title={title}\n        description={description}\n        url={`${siteUrl}${pageContext.slug}`}\n      >\n        <script type=\"application/ld+json\">\n          {`\n            {\n              \"@context\": \"https://schema.org\",\n              \"@type\": \"TechArticle\",\n              \"name\": \"${removeProtocol(siteUrl)}\",\n              \"description\": \"${description}\",\n              \"url\": \"${siteUrl}${pageContext.slug}\",\n              \"headline\": \"${title}\",\n              \"image\": \"${siteUrl}/share-image.jpg\",\n              \"datePublished\": \"${dateToISOString}\",\n              \"dateModified\": \"${dateToISOString}\",\n              \"author\": {\n                \"@type\": \"Person\",\n                \"name\": \"${author}\"\n              },\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": \"${author}\",\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"width\": \"512\",\n                  \"height\": \"512\",\n                  \"url\": \"${siteUrl}${maskable}\"\n                }\n              }\n            }\n          `}\n        </script>\n      </Seo>\n      <Breadcrumbs id={id} />\n      <article id={SKIP_TO_CONTENT_ID}>\n        <Mdx body={body} />\n      </article>\n      <EditPage pageUrl={filePath} />\n      <Pagination previous={previous} next={next} />\n    </>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}