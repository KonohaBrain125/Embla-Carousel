"use strict";(self.webpackChunkembla_carousel_docs=self.webpackChunkembla_carousel_docs||[]).push([[4356],{4356:function(n,e,i){i.r(e),e.default="import { EmblaCarouselType } from 'embla-carousel'\nimport { EngineType } from 'embla-carousel/components/Engine'\n \nexport const mockApiCall = (\n  minWait: number,\n  maxWait: number,\n  callback: () => void,\n): void => {\n  const min = Math.ceil(minWait)\n  const max = Math.floor(maxWait)\n  const wait = Math.floor(Math.random() * (max - min + 1)) + min\n  setTimeout(callback, wait)\n}\n \nexport const createHTMLFromString = (htmlString: string): HTMLElement => {\n  const div = document.createElement('div')\n  div.innerHTML = htmlString.trim()\n  return <HTMLElement>div.firstChild\n}\n \nexport type InfiniteScrollCallbackType = (\n  loadMore: (newSlides?: HTMLElement[]) => void,\n  endInfiniteScroll: () => void,\n  slideCount: number,\n) => void\n \nexport const SLIDE_TEMPLATE = `\n<div class=\"embla__slide\">\n  <div class=\"embla__slide__number\">\n    <span>__SLIDE_NUMBER__</span>\n  </div>\n  <img\n    class=\"embla__slide__img\"\n    src=\"src/images/slide-__IMG_NUMBER__.jpg\"\n    alt=\"Your alt text\"\n  />\n</div>\n`\n \nexport const setupInfiniteScroll = (\n  emblaApi: EmblaCarouselType,\n  loadMoreCallback: InfiniteScrollCallbackType,\n): (() => void) => {\n  const loadingNode = <HTMLElement>(\n    emblaApi.containerNode().querySelector('.embla-infinite-scroll')\n  )\n  let hasMoreToLoad = true\n  let slideCount = 0\n \n  const isLastSlideInView = () => {\n    const lastSlide = emblaApi.slideNodes().length - 1\n    return emblaApi.slidesInView().indexOf(lastSlide) !== -1\n  }\n \n  const deactivateBounds = () => {\n    if (slideCount === emblaApi.slideNodes().length - 1) return\n    const engine = emblaApi.internalEngine()\n    const boundsActive = engine.limit.reachedMax(engine.target.get())\n    engine.scrollBounds.toggleActive(boundsActive)\n  }\n \n  const reloadEngine = (): void => {\n    const oldEngine = emblaApi.internalEngine()\n    const pointerDown = oldEngine.dragHandler.pointerDown()\n    if (hasMoreToLoad && pointerDown) return\n    if (hasMoreToLoad && slideCount === emblaApi.slideNodes().length - 1) return\n    if (!hasMoreToLoad && !isLastSlideInView() && pointerDown) return\n \n    emblaApi.reInit()\n    const newEngine = emblaApi.internalEngine()\n    const copyEngineModules: (keyof EngineType)[] = [\n      'scrollBody',\n      'location',\n      'target',\n    ]\n    copyEngineModules.forEach((engineModule) =>\n      Object.assign(newEngine[engineModule], oldEngine[engineModule]),\n    )\n \n    newEngine.translate.to(oldEngine.location)\n    const { index } = newEngine.scrollTarget.byDistance(0, false)\n    newEngine.index.set(index)\n    newEngine.animation.start()\n \n    if (!hasMoreToLoad) removeInfiniteScroll()\n    else emblaApi.on('scroll', onScroll)\n  }\n \n  const removeLoadingSlide = (): void => {\n    const container = emblaApi.containerNode()\n    const lastSlide = container.querySelector('.embla-infinite-scroll')\n    if (lastSlide) container.removeChild(lastSlide)\n  }\n \n  const addMoreSlides = (newSlides: HTMLElement[]): void => {\n    const fragment = document.createDocumentFragment()\n    newSlides.forEach((slide) => fragment.appendChild(slide))\n    fragment.appendChild(loadingNode)\n    slideCount += newSlides.length\n    emblaApi.containerNode().appendChild(fragment)\n    loadingNode.classList.remove('embla-infinite-scroll--loading-more')\n    deactivateBounds()\n  }\n \n  const loadMore = (newSlides?: HTMLElement[]): void => {\n    hasMoreToLoad = !!newSlides\n    removeLoadingSlide()\n    if (newSlides) addMoreSlides(newSlides)\n    reloadEngine()\n  }\n \n  const onScroll = (): void => {\n    if (!isLastSlideInView()) return\n    emblaApi.off('scroll', onScroll)\n    loadingNode.classList.add('embla-infinite-scroll--loading-more')\n    loadMoreCallback(loadMore, () => loadMore(), slideCount)\n  }\n \n  const addInfiniteScroll = (): void => {\n    emblaApi.on('pointerUp', reloadEngine)\n    emblaApi.on('scroll', onScroll)\n    slideCount = emblaApi.slideNodes().length - 1\n  }\n \n  const removeInfiniteScroll = (): void => {\n    emblaApi.off('pointerUp', reloadEngine)\n    emblaApi.off('scroll', onScroll)\n  }\n \n  return addInfiniteScroll\n}\n"}}]);
//# sourceMappingURL=4356-53c8e817fcc4fce924a3.js.map