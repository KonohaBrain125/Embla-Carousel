"use strict";(self.webpackChunkembla_carousel_docs=self.webpackChunkembla_carousel_docs||[]).push([[7208],{7208:function(e,n,d){d.r(n),n.default="\nexport const setupLazyLoadImage = (emblaApi) => {\n    const imagesInView = [];\n    const slideNodes = emblaApi.slideNodes();\n    const spinnerNodes = slideNodes.map((slideNode) => slideNode.querySelector('.embla__lazy-load__spinner'));\n    const imageNodes = slideNodes.map((slideNode) => slideNode.querySelector('.embla__lazy-load__img'));\n    \n    const loadImageInView = (index) => {\n        const imageNode = imageNodes[index];\n        const slideNode = slideNodes[index];\n        const spinnerNode = spinnerNodes[index];\n        const src = imageNode.getAttribute('data-src');\n        \n        imageNode.src = src;\n        imagesInView.push(index);\n        \n        const onLoad = () => {\n            slideNode.classList.add('embla__lazy-load--has-loaded');\n            spinnerNode.parentElement?.removeChild(spinnerNode);\n            imageNode.removeEventListener('load', onLoad);\n        };\n        imageNode.addEventListener('load', onLoad);\n    };\n    \n    const loadImagesInView = () => {\n        emblaApi\n            .slidesInView(true)\n            .filter((index) => !imagesInView.includes(index))\n            .forEach(loadImageInView);\n        return imagesInView.length === imageNodes.length;\n    };\n    \n    const loadImagesInViewAndDestroyIfDone = (emblaApi, eventName) => {\n        const loadedAll = loadImagesInView();\n        if (loadedAll)\n            emblaApi.off(eventName, loadImagesInViewAndDestroyIfDone);\n    };\n    \n    return loadImagesInViewAndDestroyIfDone;\n};\n"}}]);
//# sourceMappingURL=7208-c937d7f806539da6db6c.js.map