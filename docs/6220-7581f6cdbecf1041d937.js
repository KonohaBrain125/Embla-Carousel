"use strict";(self.webpackChunkembla_carousel_docs=self.webpackChunkembla_carousel_docs||[]).push([[6220],{6220:function(e,n,l){l.r(n),n.default="import { EmblaCarouselType } from 'embla-carousel'\n \nconst TWEEN_FACTOR = 3\n \nconst numberWithinRange = (number: number, min: number, max: number): number =>\n  Math.min(Math.max(number, min), max)\n \nconst calculateTweenValuesScale = (emblaApi: EmblaCarouselType): number[] => {\n  const engine = emblaApi.internalEngine()\n  const scrollProgress = emblaApi.scrollProgress()\n \n  return emblaApi.scrollSnapList().map((scrollSnap, index) => {\n    if (!emblaApi.slidesInView().includes(index)) return 0\n    let diffToTarget = scrollSnap - scrollProgress\n \n    if (engine.options.loop) {\n      engine.slideLooper.loopPoints.forEach((loopItem) => {\n        const target = loopItem.target()\n        if (index === loopItem.index && target !== 0) {\n          const sign = Math.sign(target)\n          if (sign === -1) diffToTarget = scrollSnap - (1 + scrollProgress)\n          if (sign === 1) diffToTarget = scrollSnap + (1 - scrollProgress)\n        }\n      })\n    }\n    const tweenValue = 1 - Math.abs(diffToTarget * TWEEN_FACTOR)\n    return numberWithinRange(tweenValue, 0, 1)\n  })\n}\n \nexport const setupTweenScale = (\n  emblaApi: EmblaCarouselType\n): {\n  applyTweenScale: () => void\n  removeTweenScale: () => void\n} => {\n  const tweenNodes = <HTMLElement[]>(\n    emblaApi\n      .slideNodes()\n      .map((slideNode) => slideNode.querySelector('.embla__scale'))\n  )\n \n  const applyTweenScale = (): void => {\n    const tweenValues = calculateTweenValuesScale(emblaApi)\n    tweenValues.forEach((tweenValue, index) => {\n      tweenNodes[index].style.transform = `scale(${tweenValue})`\n    })\n  }\n \n  const removeTweenScale = (): void => {\n    tweenNodes.forEach((slide) => slide.removeAttribute('style'))\n  }\n \n  return {\n    applyTweenScale,\n    removeTweenScale\n  }\n}\n"}}]);
//# sourceMappingURL=6220-7581f6cdbecf1041d937.js.map