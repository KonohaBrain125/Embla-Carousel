{"version":3,"sources":["webpack://embla-carousel-docs/./src/components/Page/EditPage.tsx","webpack://embla-carousel-docs/./src/components/Page/Pagination.tsx","webpack://embla-carousel-docs/./src/components/Page/Breadcrumbs.tsx","webpack://embla-carousel-docs/./src/templates/Page.tsx"],"names":["Wrapper","styled","PlainLink","EditPage","props","pageUrl","url","URLS","to","Icon","iconSvg","iconSize","ITEM_SPACING","Item","supportsStyles","ItemLabel","ItemTitle","GradientText","gradientTextStyles","Pagination","next","previous","aria-label","slug","title","iconSide","itemStyles","css","Link","ActiveTitle","Separator","Breadcrumbs","id","breadcrumbs","useRouteBreadcrumbs","length","map","index","Fragment","key","size","svg","role","aria-hidden","useSiteMetadata","siteUrl","author","data","pageContext","filePath","mdx","frontmatter","body","description","date","dateToISOString","useMemo","Date","toISOString","Seo","type","removeProtocol","maskable","SKIP_TO_CONTENT_ID","Mdx"],"mappings":"+PAMMA,GAAUC,QAAOC,MAAV,wEAAGD,CAAH,6KAaAE,EAAW,SAACC,GACvB,IAAQC,EAAYD,EAAZC,QACFC,EAASC,0BAAN,IAAmCF,EAE5C,OACE,gBAACL,EAAD,CAASQ,GAAIF,GACX,gBAACG,EAAA,EAAD,CAAcC,QAAQ,MAAMC,SAAS,UAArC,8B,SCjBAC,EAAe,SAEfZ,EAAUC,oBAAH,2DAAGA,CAAH,mFAIKW,GAGZC,EAAOZ,oBAAH,wDAAGA,CAAH,6HACQW,EAQZE,mBAMAC,EAAYd,oBAAH,6DAAGA,CAAH,2DAKTe,EAAYf,oBAAH,6DAAGA,CAAH,6DAMTgB,EAAehB,qBAAH,gEAAGA,CAAH,SACdiB,MAQSC,EAAa,SAACf,GACzB,IAAQgB,EAAmBhB,EAAnBgB,KAAMC,EAAajB,EAAbiB,SAEd,OACE,gBAAC,EAAD,CAASC,aAAW,yBAClB,gBAACT,EAAD,KACGQ,GACC,gBAAC,KAAD,CAAWb,GAAIa,EAASE,MACtB,gBAACR,EAAD,iBACA,gBAACC,EAAD,KACE,gBAACP,EAAA,EAAD,CAAcC,QAAQ,aACpB,gBAACO,EAAD,KAAeI,EAASG,WAMlC,gBAACX,EAAD,KACGO,GACC,gBAAC,KAAD,CAAWZ,GAAIY,EAAKG,MAClB,gBAACR,EAAD,aACA,gBAACC,EAAD,KACE,gBAACP,EAAA,EAAD,CAAcC,QAAQ,aAAae,SAAS,SAC1C,gBAACR,EAAD,KAAeG,EAAKI,aCrE9BxB,EAAUC,oBAAH,gEAAGA,CAAH,4EAOPyB,GAAaC,QAAH,sDAKVC,GAAO3B,QAAOC,MAAV,wEAAGD,CAAH,SACNyB,GAGEG,EAAc5B,qBAAH,oEAAGA,CAAH,SACbyB,GAGEI,GAAY7B,QAAOQ,KAAV,6EAAGR,CAAH,qDAOF8B,EAAc,SAAC3B,GAC1B,IAAQ4B,EAAO5B,EAAP4B,GACFC,GAAcC,QAAoBF,GAExC,OAA2B,IAAvBC,EAAYE,OAAqB,KAGnC,gBAAC,EAAD,CAASb,aAAW,yBACjBW,EAAYG,KAAI,WAAsBC,GAAtB,IAAGL,EAAH,EAAGA,GAAIT,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACfa,IAAUJ,EAAYE,OAAS,EAC7B,gBAAC,EAAAG,SAAD,CAAUC,IAAKP,GACb,gBAAC,EAAD,CAAMxB,GAAIe,GAAOC,GACjB,gBAACM,EAAD,CACEU,KAAK,SACLC,IAAI,eACJC,KAAK,eACLC,cAAY,WAIhB,gBAACd,EAAD,CAAaU,IAAKP,GAAKR,Q,mBCiDjC,EA1Da,SAACpB,GACZ,OAA4BwC,UAApBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OACTC,EAAsB3C,EAAtB2C,KAAMC,EAAgB5C,EAAhB4C,YACN5B,EAAiC4B,EAAjC5B,KAAMC,EAA2B2B,EAA3B3B,SAAU4B,EAAiBD,EAAjBC,SAAUjB,EAAOgB,EAAPhB,GAClC,EAA8Be,EAAKG,IAA3BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KACb5B,EAA6B2B,EAA7B3B,MAAO6B,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACtBC,GAAkBC,cACtB,kBAAM,IAAIC,KAAQH,EAAZ,QAAwBI,gBAC9B,CAACJ,IAGH,OACE,gCACE,gBAACK,EAAA,EAAD,CACEnC,MAAOA,EACP6B,YAAaA,EACb/C,IAAG,GAAKuC,EAAUG,EAAYzB,MAE9B,0BAAQqC,KAAK,uBAAb,oIAKiBC,QAAehB,GALhC,qCAMwBQ,EANxB,6BAOgBR,EAAUG,EAAYzB,KAPtC,kCAQqBC,EARrB,+BASkBqB,EATlB,uDAU0BU,EAV1B,sCAWyBA,EAXzB,+FAcmBT,EAdnB,yHAkBmBA,EAlBnB,8KAuBoBD,EAAUiB,IAvB9B,qEA8BF,gBAAC/B,EAAD,CAAaC,GAAIA,IACjB,2BAASA,GAAI+B,MACX,gBAACC,EAAA,EAAD,CAAKZ,KAAMA,KAEb,gBAACjD,EAAD,CAAUE,QAAS4C,IACnB,gBAAC9B,EAAD,CAAYE,SAAUA,EAAUD,KAAMA","file":"component---src-templates-page-tsx-5602cbfb66a6245cb60f.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { PlainLink } from 'components/Link'\nimport { URLS } from 'consts'\nimport { IconWithText } from 'components/Icon'\n\nconst Wrapper = styled(PlainLink)`\n  display: inline-flex;\n  align-items: center;\n  font-size: 1.4rem;\n  text-decoration: none;\n  padding-top: 0.6rem;\n  padding-bottom: 0.6rem;\n  margin-top: 4.8rem;\n  color: var(--text-low-contrast);\n`\n\ntype PropType = { pageUrl: string }\n\nexport const EditPage = (props: PropType) => {\n  const { pageUrl } = props\n  const url = `${URLS.GITHUB_DOCUMENTATION}/${pageUrl}`\n\n  return (\n    <Wrapper to={url}>\n      <IconWithText iconSvg=\"pen\" iconSize=\"1.5rem\">\n        Edit this page on GitHub\n      </IconWithText>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { PropType as PageType } from 'templates/Page'\nimport { PlainLink } from 'components/Link'\nimport { gradientTextStyles } from 'utils'\nimport { supportsStyles } from 'consts'\nimport { IconWithText } from 'components/Icon'\n\nconst ITEM_SPACING = '2.4rem'\n\nconst Wrapper = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 4.8rem;\n  margin-left: -${ITEM_SPACING};\n`\n\nconst Item = styled.div`\n  padding-left: ${ITEM_SPACING};\n\n  > a {\n    color: var(--brand-primary);\n  }\n\n  &:nth-child(2) > a {\n    text-align: right;\n    ${supportsStyles.gradientText} {\n      color: var(--brand-secondary);\n    }\n  }\n`\n\nconst ItemLabel = styled.div`\n  color: var(--text-low-contrast);\n  padding-bottom: 0.6rem;\n`\n\nconst ItemTitle = styled.div`\n  display: inline-flex;\n  align-items: center;\n  font-weight: 500;\n`\n\nconst GradientText = styled.span`\n  ${gradientTextStyles};\n`\n\ntype PropType = {\n  next: PageType['pageContext']['next']\n  previous: PageType['pageContext']['previous']\n}\n\nexport const Pagination = (props: PropType) => {\n  const { next, previous } = props\n\n  return (\n    <Wrapper aria-label=\"Pagination Navigation\">\n      <Item>\n        {previous && (\n          <PlainLink to={previous.slug}>\n            <ItemLabel>Previous</ItemLabel>\n            <ItemTitle>\n              <IconWithText iconSvg=\"arrowLeft\">\n                <GradientText>{previous.title}</GradientText>\n              </IconWithText>\n            </ItemTitle>\n          </PlainLink>\n        )}\n      </Item>\n      <Item>\n        {next && (\n          <PlainLink to={next.slug}>\n            <ItemLabel>Next</ItemLabel>\n            <ItemTitle>\n              <IconWithText iconSvg=\"arrowRight\" iconSide=\"right\">\n                <GradientText>{next.title}</GradientText>\n              </IconWithText>\n            </ItemTitle>\n          </PlainLink>\n        )}\n      </Item>\n    </Wrapper>\n  )\n}\n","import React, { Fragment } from 'react'\nimport styled, { css } from 'styled-components'\nimport { PlainLink } from 'components/Link'\nimport { useRouteBreadcrumbs } from 'hooks'\nimport { Icon } from 'components/Icon'\n\nconst Wrapper = styled.nav`\n  display: flex;\n  align-items: center;\n  font-size: 1.4rem;\n  margin-bottom: 1.8rem;\n`\n\nconst itemStyles = css`\n  color: var(--text-low-contrast);\n  padding: 0.6rem 0;\n`\n\nconst Link = styled(PlainLink)`\n  ${itemStyles};\n`\n\nconst ActiveTitle = styled.span`\n  ${itemStyles};\n`\n\nconst Separator = styled(Icon)`\n  color: var(--text-low-contrast);\n  margin: 0 0.6rem;\n`\n\ntype PropType = { id: string }\n\nexport const Breadcrumbs = (props: PropType) => {\n  const { id } = props\n  const breadcrumbs = useRouteBreadcrumbs(id)\n\n  if (breadcrumbs.length === 0) return null\n\n  return (\n    <Wrapper aria-label=\"Breadcrumb Navigation\">\n      {breadcrumbs.map(({ id, slug, title }, index) =>\n        index !== breadcrumbs.length - 1 ? (\n          <Fragment key={id}>\n            <Link to={slug}>{title}</Link>\n            <Separator\n              size=\"0.6rem\"\n              svg=\"chevronRight\"\n              role=\"presentation\"\n              aria-hidden=\"false\"\n            />\n          </Fragment>\n        ) : (\n          <ActiveTitle key={id}>{title}</ActiveTitle>\n        ),\n      )}\n    </Wrapper>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport { Seo } from 'components/Seo'\nimport maskable from 'assets/images/maskable.png'\nimport { useSiteMetadata } from 'hooks'\nimport { EditPage, Pagination, Breadcrumbs } from 'components/Page'\nimport { SKIP_TO_CONTENT_ID } from 'components/TabAccess'\nimport { RouteType } from 'components/Routes'\nimport { removeProtocol } from 'utils'\nimport { Mdx } from 'components/Mdx'\n\nexport const query = graphql`\n  query PageQuery($id: String) {\n    mdx(id: { eq: $id }) {\n      body\n      frontmatter {\n        title\n        description\n        date(formatString: \"DD MMMM YYYY\")\n      }\n    }\n  }\n`\n\nexport type PropType = {\n  data: {\n    mdx: {\n      body: string\n      frontmatter: {\n        title: string\n        date: string\n        description: string\n      }\n    }\n  }\n  pageContext: {\n    id: string\n    filePath: string\n    next?: RouteType\n    previous?: RouteType\n    slug: string\n  }\n}\n\nconst Page = (props: PropType) => {\n  const { siteUrl, author } = useSiteMetadata()\n  const { data, pageContext } = props\n  const { next, previous, filePath, id } = pageContext\n  const { frontmatter, body } = data.mdx\n  const { title, description, date } = frontmatter\n  const dateToISOString = useMemo(\n    () => new Date(`${date} UTC`).toISOString(),\n    [date],\n  )\n\n  return (\n    <>\n      <Seo\n        title={title}\n        description={description}\n        url={`${siteUrl}${pageContext.slug}`}\n      >\n        <script type=\"application/ld+json\">\n          {`\n            {\n              \"@context\": \"https://schema.org\",\n              \"@type\": \"TechArticle\",\n              \"name\": \"${removeProtocol(siteUrl)}\",\n              \"description\": \"${description}\",\n              \"url\": \"${siteUrl}${pageContext.slug}\",\n              \"headline\": \"${title}\",\n              \"image\": \"${siteUrl}/share-image.jpg\",\n              \"datePublished\": \"${dateToISOString}\",\n              \"dateModified\": \"${dateToISOString}\",\n              \"author\": {\n                \"@type\": \"Person\",\n                \"name\": \"${author}\"\n              },\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": \"${author}\",\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"width\": \"512\",\n                  \"height\": \"512\",\n                  \"url\": \"${siteUrl}${maskable}\"\n                }\n              }\n            }\n          `}\n        </script>\n      </Seo>\n      <Breadcrumbs id={id} />\n      <article id={SKIP_TO_CONTENT_ID}>\n        <Mdx body={body} />\n      </article>\n      <EditPage pageUrl={filePath} />\n      <Pagination previous={previous} next={next} />\n    </>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}